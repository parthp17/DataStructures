1) LinkedListNode
	
	T data;
	Node next;
	
2) LinkedList

	LinkedListNode head;
	int length;
	constructors
	
3) Insert at front

	newNode.next = this.head;
	this.head = neNode;
	this.length++;
	
4) Insert at rear

	temp = this.head;
	if(temp == null) 
		this.head = node;
	else
		while(temp.next != null) temp = temp.next;
		temp.next = node;
		node.next = null;
	length++;
	
5) Insert at Position p

	temp = this.head
	if temp == null; this.head = node;
	else
		for(int i = 0; i < p && temp != null; i++, temp = temp.next);
		node.next = temp.next;
		temp.next = node;
	length++;
	
6) Remove from beginning

	node = this.head;
	this.head = this.head.next;
	node.next = null;
	length--;
	return node;
	
7) Remove from rear
	
	if this.head == null; return null; 
	temp = this.head;
	for(int i = 1 ; i < length ; i++; temp = temp.next);
	node = temp.next;
	temp.next = null;
	length--;
	if length == 0; this.head = null; 
	
8) Remove at position p

	temp = this.head;
	if(p == 0) this.head = this.head.next; temp.next = null; length--; return temp;
	else end = length > position ? position : length;
	for(int i = 1 ; i < end ; i++; temp = temp.next);
	node = temp.next;
	temp.next = null;
	length--;
	if length == 0; this.head = null;
		
9) Search 

	temp = this.head
	if (temp == null) return null;
	for(int i = 1 ; i <= length; i++)
		if(temp.data == value) return temp;
	return null;
	
	
10) Nth node from end.

	if(n > length) return null;
	fast = this.head;
	for(int i = 1; i <n; i++) fast = fast.next;
	slow = this.head;
	while(fast.next != null)
		slow = slow.next;
		fast = fast.next;
	return slow;
	
	USing Recursion
	
	Node nthNodeFromEnd(LinkedListNode node, int[] arr,p)
	if (node == null) arr[0]++;return node;
	node1 = nthNodeFromEnd(node.next, arr);
	if(node1 != null) return node1;
	else if(arr[0] == p) return node;
	else return null;
	
11) Find middle in the LinkedList

	if (this.head == null) return null;
	fast = this.head;
	slow = this.head;
	
	while(fast != null && fast.next != null)
		fast = fast.next.next;
		slow = slow.next;
	return slow;
	
12) Delete LinkedList
	
	node = this.head;
	node2 = this.head;
	while(node != null) node = node.next; node2.next = null; node2 = node;
	this.head = null;
	length = 0;
	
13) Find Loop and point of loop

	fast = this.head;
	slow = this.head;
	bLoop = false;
	while(fast !=null && fast.next != null)
		fast = fast.next.next;
		slow = slow.next;
		if(fast == slow) bLoop = true; break;	
	if(bLoop)
		fast = this.head;
		while(fast != slow) fast = fast.next; slow = slow.next;
	else return -1;
	
14) reverse a linkedlist

	prev = null; next = null; current = this.head;
	while(current != null)
		next = current.next;
		current.next = prev;
		prev = current;
		current = next;
		
15) reverse a linkedlist recursive

	if(node.next == null) return node; // new head
	next = node.next; // next = 2; node = 1
	rest = recursiverevser(next); 
	next.next = node; 2->1
	return rest;//always return new head
	
	 
16)	Determine whether a linkedList is palindrome or not.

	p1, p2 = this.head;
	move p1, p2 to length/2; p1 = p1.next;
	using p1 reverse the 2nd half of the linked list and complete the linkedList
	p1 = this.head; p2 = p2.next;
	while p2 != null; if p1 == p2; isPalindrome true;
	else false;
	reverse the 2nd half of linkedlist to make it original linkedlist.
	node.next = prev.
	
17) reverse in pair

	prev= null; current = head; next = head.next;
	while(current != null && next != null)
		tmp = next.next; // store 3
		next.next = current; // break 2 -> 3 and set 2 -> 1
		if(prv != null) prv.next = next; // for next step set 1 - > 4
		current.next = tmp; // break 1 - > 2 and set 1 ->  null;
		prev = current; // prev =1 ;
		current = tmp; // current = 3;
		next = current.next; // next = 4
		
18)	remove duplicates

	current  = this.head
	set= new hashset
	set.add(current.data)
	while(current.next != null)
		if(!set.contains(current.next.data))
			set.add(current.data)
		else
			temp = current.next.next;
			current.next.next = null;
			current.next = temp;
			this.length--;
		current = current.next;	
			
19) split a circular LinkedList into 2 circular LinkedList

	fast, slow = this.head;
	while(fast.next != head  && fast.next.next != head)
		fast = fast.next.next;
		slow = slow.next;
	if(fast.next.next == head) fast = fast.head;
	first = fast.next;
	mid = slow.next;
	fast.next = mid; // join 2nd half
	slow.next = first;// join 1st half
	
20) Merge 2 sorted linkedlist

	if(node1 == null && node2 ==null)return null;
	else if (node1 == null) return node2;
	else if(node2 == null) return node1;
	else
		if(node1.data <= node2.data)
			node1.next = sort(node1.next,node2) return node1;
		else
			node2.next = sort(node1,node2.next) return node2;
			
21) Reverse k nodes in group

	1->2->3 -> 4->5->6 -> 7 k = 3
	3->2->1 -> 6->5->4 -> 7
	
	current = this.head;
	prevcurrent  = current;
	prevtail = null;
	while(current != null)
		int count = k;
		next = null;
		prev = null;
		while(count > 0 && current != null)
			next = current.next;
			current.next = prev;
			prev = current;
			current = next;
			count--;
		if(prevtail != null) prevtail.next = prev;
		else this.head = prev;
		prevtail = prevcurrent; // prevtail = 1 from null to set 1 -> 6 in next round
		prevcurrent = current;	// prevcurrent = 4 to set prevtail to 4 in next round for 4 -> 7
		
22) Reverse k nodes in group recursively

	prev = null;
	next = null;
	current = node;
	int count = k
	while(count > 0 && current != null)
		next = current.next;
		current.next = prev;
		prev = current;
		current = next;
		count--;
	if(current != null)	nodes.next = reversekrecursive(current,k) // 1-> 6 
	else return prev;

23) Revere k alternate node

	one cycle = 2k nodes
	reverse k nodes.
	add next k nodes as it is.
	current.next = recurse(current.next, k)
	

	
24) Sum of two linkedlist

	if (n1 ==null && n2 == null && carry ==null) return null;
	int result = carry;
	if(n1 != null) result += n1.data; n11= n1.next;
	if(n2 != null) result += n2.data; n22 = n2.next;
	node = new LLNode(result%10);
	node.next = recursivesum(n11,n22,result/10);
	
DoublelyLinkedList

25) Greatest Modulo k node

	i =1 ; node head;
	increment i and node;
	if(i%k==0) moduloNode = node;
	return moduloNode;
	
26) RotateRight by k 

	node1, node2 = head;
	node2 = node2.next k times;
	while(node2.next != null)
		node2 = node2.next;
		node1 = node1.next;
	node2.next = this.head;
	this.head = node1.next;
	node1.next= null;
	return this.head;
	
27) reOrderbyK

	create two seperate ll
	one with elements smaller than k
	2nd with element greater than k
	join both.
	
28) Sort a linkedList
    reach to middle
    save middle.next and set middle.next = null;
    sort head to middle and middle.next to end;
    merge

29)